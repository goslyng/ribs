

function createSpineMask(m,fitted)

% debugText='hi';

if ~(exist('fitted','var'))
    fitted=1;
end

inh=1;
runFittingSettings;

pathSettings;
addpath([codePath '//mvonSiebenthal/mri_toolbox_v1.5/']) 

% settings.nSamplesRibcage = 6;
% settings.wFirstPoint = [0 0 0];
% errs1=6;
% save('/home/sameig/debugText','debugText');
%% Load Rib Model


if (m==59 || m==60)
    settings.ribNumber=8:10;
else
    settings.ribNumber=7:10;
end

if fitted
    fittedText='fitted_';
else
    fittedText='';
end


%%
 

[ptsExh, rib_nos]=loadRibVTKFiles(dataPath,m,settings.ap,settings.is,settings.lr,0);
[firstPts, pts] = findFirstPoints(rib_nos,ptsExh,settings,m);

% save('~/debugTexHallt2','debugText');

%%



if (m >= 60 )
    
    imExh_ = load([dataPath num2str(m)  '/masterframes/exhMaster.mat']);
    imExh_.stack.par.thickness =2.5;

else
    
    imExh_ = load([dataPath num2str(m)  '/masterframes/exhMaster7_unmasked_uncropped.mat']);
    imExh_.stack.par.thickness =5;
    
end


if fitted

  tag = 'RibFittedRight';
  else
    
    if m>=60
        tag = 'RibRightExhNew';
    else
        tag = 'RibRightNew';

    end
    
end
    subjectDataPath = [dataPath num2str(m) '/'];

    ribDir =[subjectDataPath 'ribs/' ];

    for i= 1:12
        try
            
            ribiPath = [ribDir tag num2str(i)];
            ribsExh{i} = readVTKPolyDataPoints(ribiPath);
%             ribsExh{i} = transCoord(pts_mri,ap,is,lr);
        catch
            m
            i
        end
    end
  



%%
        
moving = imExh_.stack.im;
% fixed = imInh_.stack.im;


    res_1(1,1) = imExh_.stack.par.inplane;
    res_1(2,1) = imExh_.stack.par.inplane;
    res_1(3,1) = imExh_.stack.par.thickness;
    
% imm=imExh_.stack.im;
% imm=imm(:,end:-1:1,:);
% moving =imm;


%%
 

for r=7:10

    pp{r} = ribsExh{r};

    pp{r}(2,:) = size(imExh_.stack.im,2)*res_1(2) -pp{r}(2,:);
    pp{r}(3,:) = size(imExh_.stack.im,3)*res_1(3) -pp{r}(3,:);
    pp{r} =  pp{r} ./repmat(res_1,1,100);

    %pp{r}=ceil(pp{r});
end


p=[];
    for i=1:10
        for r=7:9
        dt = (pp{r+1}(:,i) -pp{r}(:,i) )/20;
        newPoints = repmat(pp{r}(:,i),1,20) + (repmat(1:20,3,1).*repmat(dt,1,20));
        p=[p newPoints];
        end
    end
        p=ceil(p);
%         %%
% figure
% 
% for z=50:70
%     hold off
% imshow(moving(:,:,z),[]);hold on; plot33(p(:,find(abs(p(3,:)-z)<1)),'b.')
% pause(2);
% end
%%
       moveing_mask = moving*0; 
       for i=1:size(p,2)
        for ii=-3:3
            for jj=-2:7
                for kk=-1:1
                    try
                        moveing_mask(p(2,i)+ii,p(1,i)+jj,p(3,i)+kk) = 1;
                    catch
                    end
                end
            end
        end
       end


saveAnlz(moveing_mask,imExh_.stack.par,[dataPath num2str(m)  '/masterframes/spine' ],0);

for r=7:10
    moveing_mask = zeros(size(moving).*res_1');
    firstPointRib{r} = ribsExh{r}(:,1);
    for i=1:100

        for ii=-1:1
            for jj=-1:1
                for kk=0
                    try
                        pnt = ribsExh{r}(:,i);

                        pnt(2,1) = size(moveing_mask,2) -pnt(2);
                        pnt(3,1) = size(moveing_mask,3) -pnt(3);
    
    
                        pnt = floor(pnt+ [jj;ii;kk]);
                        moveing_mask(pnt(2),pnt(1),pnt(3)) = 1;
                    catch
                        ii
                        jj
                        kk
                    end
                end
            end
        end


    end
    mask.par = imExh_.stack.par;
    mask.par.inplane = 1;
    mask.par.thickness =1;
    mask.par.w = size(moveing_mask,2);
    mask.par.h = size(moveing_mask,1);
    mask.par.nDats = size(moveing_mask,3);
    saveAnlz(moveing_mask,mask.par,[dataPath num2str(m)  '/masterframes/mask' num2str(r)],0);

end
